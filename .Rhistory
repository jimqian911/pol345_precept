x = -5 #x is now negative
if (x > 0){
print("Positive number")
}
#Calculate the absolute value of a number
x = -3
if (x >=0){
cat("The absolute value of x is", x)
} else{
cat("The absolute value of x is", -x)
}
x = 0
if (x > 0){
cat("x is positive")
} else if (x < 0){
cat("x is negative")
} else {
cat("x is zero")
}
#Calculate the absolute value for a vector of numbers
x = c(2, 0, -1, 5, -3, -6)
#Calculate the absolute value for a vector of numbers
x = c(2, 0, -1, 5, -3, -6)
x.abs = c() #the container to store absolute values of each element in x
for (i in 1:length(x)){
if (x >=0) {
x.abs[i] = x
} else {
x.abs[i] = -x
}
}
print(x.abs)
#Calculate the absolute value for a vector of numbers
x = c(2, 0, -1, 5, -3, -6)
x.abs = c() #the container to store absolute values of each element in x
for (i in 1:length(x)){
if (x[i] >=0) {
x.abs[i] = x
} else {
x.abs[i] = -x
}
}
print(x.abs)
#Calculate the absolute value for a vector of numbers
x = c(2, 0, -1, 5, -3, -6)
x.abs = c() #the container to store absolute values of each element in x
for (i in 1:length(x)){
if (x[i] >=0) {
x.abs[i] = x[i]
} else {
x.abs[i] = -x[i]
}
}
print(x.abs)
resource = read.csv("data/resource.csv")
resource = read.csv("data/resources.csv")
head(resourcec)
head(resource)
res_NoNA = na.omit(resourece[, 4:8])
res_NoNA = na.omit(resource[, 4:8])
res_NoNA_standardized = scale(res_NoNA)
res_NoNA = na.omit(resource[, c(3,4,5,8)])
res_NoNA_standardized = scale(res_NoNA)
head(res_NoNA_standardized)
res_NoNA = na.omit(resource[, c(3,4,5,7)])
res_NoNA_standardized = scale(res_NoNA)
km.3 = kmeans(res_NoNA_standardized,
center = 3)
class(km.3)
typeof(km.3)
names(km.3)
lapply(km.3, typeof)
km.3.cluster = km.3$cluster
km.3.centers = km.3$centers
?kmeans
table(km.3.cluster)
set.seed(08540)
km.3 = kmeans(res_NoNA_standardized,
center = 3)
```{r}
km.3 = kmeans(res_NoNA_standardized,
center = 3)
names(km.3)
km.3.cluster = km.3$cluster
km.3.centers = km.3$centers
table(km.3.cluster)
plot(x = res_NoNA$logGDPcp,
y = res_NoNA$illit,
xlab = "GDP Per Capital (logged)",
ylab = "Illiteracy Rate",
col = km.3.cluster)
km.3.centers
?%in%
? in
?in
?%in%
x = 1:100
x = 1:100 #x is a vector of integers from 1 to 100
#Say you want to check whether the number 55 is in x
55 %in% x
x = 1:100 #x is a vector of integers from 1 to 100
#Say you want to check whether the number 55 is in x
55 %in% x
#As well as whether the number 200 is in x
200 %in% x
x = 1:100
y = c(1, 5, 200, -2, 33, 0)
y %in% x
x = 1:100
y = c(1, 5, 200, -2, 33, 0)
y[y %in% x]
getwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345")
getwd()
getwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345")
getwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week8")
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8")
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
congress = read.csv("congress.csv")
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
congress = read.csv("congress.csv")
head(congress)
getwd()
getwd()
congress = read.csv("data/congress.csv")
#change the working directory by setwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
congress = read.csv("polls08.csv")
polls08 = read.csv("polls08.csv")
#change the working directory by setwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
polls08 = read.csv("polls08.csv")
#change the working directory by setwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
polls08 = read.csv("polls08.csv")
#change the working directory by setwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
polls08 = read.csv("polls08.csv")
#change the working directory by setwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
polls08 = read.csv("polls08.csv")
#change the working directory by setwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
polls08 = read.csv("polls08.csv")
knitr::opts_knit$set(root.dir = "C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
getwd()
knitr::opts_knit$set(root.dir = "C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
getwd()
getwd()
congress = read.csv("data/congress.csv")
getwd()
#change the working directory by setwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
#change the working directory by setwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
getwd()
getwd()
#change the working directory by setwd()
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
polls08 = read.csv("polls08.csv")
head(polls08)
setwd("C:/Users/qianj/OneDrive - Princeton University/Princeton/Course/POL 345/pol345_precept/week 8/data")
polls08 = read.csv("polls08.csv")
getwd()
#This will not work
polls08 = read.csv("polls08.csv")
df1 = data.frame(name = c("Amy", "Bob", "Carol", "David"),
id = 1:4,
class = c(2020, 2022, 2021, 2023))
df1
info = data.frame(name = c("Amy", "Bob", "Carol", "David"),
id = 1:4,
class = c(2020, 2022, 2021, 2023))
home = data.frame(name = c("Bob", "David", "Amy", "Carol"),
state = c("CA", "NY", "NJ", "MA"))
merge(info, home)
merge(info, home,
by = name)
merge(info, home,
by = "name")
major = data.frame(x = c("Amy", "Carol", "Bob", "David"),
major = c("Economics", "Polics", "Math", "Computer Science"))
info_name
info_name = merge(info, home,
by = "name")
info_name
major = data.frame(x = c("Amy", "Carol", "Bob", "David"),
major = c("Economics", "Polics", "Math", "Computer Science"))
major
merge(info_name,
major)
merge(info_name,
major,
by = c("name" = "x"))
?merge
merge(info_name,
major,
by.x = "name",
by.y = "x")
congress = read.csv("data/congress.csv")
head(congress)
rep(info$name, 3)
?rep
rep(info$name, each= 3)
rep(1:3, 4)
sample(1:12, 12, replace = T)
phone = data.set(name = rep(info$name, each= 3),
day = rep(1:3, 4),
screetime = sample(1:12, 12, replace = T))
phone = data.frame(name = rep(info$name, each= 3),
day = rep(1:3, 4),
screetime = sample(1:12, 12, replace = T))
phone
merge(phone, info,
by = "name")
?mrege
?merge
sign(5)
sign(-3)
sign(3) = sign(4)
sign(3) == sign(4)
x = c(3, 0, 11, -4, 1)
sign(x)
plot(phone$day,
phone$screetime)
plot(phone$day,
phone$screetime,
type = "n")
text(x = phone$day,
y = phone$screetime,
labels = phone$name)
plot(phone$day,
phone$screetime,
type = "n")
text(x = phone$day,
y = phone$screetime,
labels = phone$name)
plot(phone$day,
phone$screetime,
type = "n",
ylim = c(0, 12))
text(x = phone$day,
y = phone$screetime,
labels = phone$name)
set.seed(08540)
phone = data.frame(name = rep(info$name, each= 3),
day = rep(1:3, 4),
screetime = sample(1:12, 12, replace = F))
plot(phone$day,
phone$screetime,
type = "n",
ylim = c(0, 12))
text(x = phone$day,
y = phone$screetime,
labels = phone$name)
plot(1:10,
1:10)
plot(1:10,
1:10)
text(x = 4, y = 8, labels = "TEXT")
plot(phone$day,
phone$screetime,
ylim = c(0, 12))
#Add names
text(x = phone$day,
y = phone$screetime,
labels = phone$name)
plot(phone$day,
phone$screetime,
ylim = c(0, 12))
#Add names
text(x = phone$day,
y = phone$screetime,
labels = phone$name)
plot(phone$day,
phone$screentime,
type = "n", #hide the points
ylim = c(0, 12))
text(x = phone$day,
y = phone$screentime,
labels = phone$name)
plot(phone$day,
phone$screentime,
type = "n", #hide the points
ylim = c(0, 12))
text(x = phone$day,
y = phone$screentime,
labels = phone$name)
plot(phone$day,
phone$screentime,
type = "n", #hide the points
ylim = c(0, 12))
text(x = phone$day,
y = phone$screentime,
labels = phone$name)
plot(phone$day,
phone$screetime,
ylim = c(0, 12))
#Add names
text(x = phone$day,
y = phone$screetime,
labels = phone$name)
plot(phone$day,
phone$screetime,
type = "n", #hide points
ylim = c(0, 12))
#Add names
text(x = phone$day,
y = phone$screetime,
labels = phone$name)
set.seed(08540)
phone = data.frame(name = rep(info$name, each= 3),
day = rep(1:3, 4),
screentime = sample(1:12, 12, replace = F))
phone
plot(phone$day,
phone$screetime,
ylim = c(0, 12))
phone
plot(phone$day,
phone$screetime,
ylim = c(0, 12))
phone$day
phone$screetime
?lm
resources = read.csv("data/resources.csv")
resources = read.csv("data/resources.csv")
head(resources)
lm(life~logGDPcp, data = resources)
my.lm = lm(life~logGDPcp, data = resources)
typeof(my.lm)
my.lm
coef(my.lm)
my.coef = coef(my.lm)
#
typeof(my.coef)
#
class(my.coef)
names(my.coef)
my.coef[2]
my.coef["logGDPcp"]
my.coef[2]
my.coef["logGDPcp"]
summary(my.lm)
summary(my.lm)$R2
summary(my.lm)
summary(my.lm)$r.squared
class(summary(my.lm))
typeof(summary(my.lm))
names(summary(my.lm))
plot(resources$logGDPcp, resources$life)
plot(resources$logGDPcp, resources$life)
abline(my.lm)
plot(resources$logGDPcp, resources$life)
abline(my.lm, col = "red")
my.coef
new.resources = data.frame(logGDPcp = rnorm(100) * 100)
set.seed(08540)
new.resources = data.frame(logGDPcp = rnorm(100) * 100)
new.resources
set.seed(08540)
new.resources = data.frame(logGDPcp = abs(rnorm(10) * 100))
new.resources
set.seed(08540)
new.resources = data.frame(logGDPcp = abs(rnorm(10) * 30))
my.coef[1] + new.resources$logGDPcp * my.coef[2]
predict(my.lm, newdata = new.resources)
?predict
resources = read.csv("data/resources.csv")
head(resources)
resources = read.csv("data/resources.csv")
head(resources)
lm(life ~ logGDPcp, data = resources)
my.lm = lm(life ~ logGDPcp, data = resources)
my.lm
names(lm.lm)
names(my.lm)
coef(my.lm)
my.coef = coef(my.lm)
#
class(my.coef)
my.coef = coef(my.lm)
#
class(my.coef)
names(my.coef)
#The folllowing two ways are equivalent
my.coef[2]
my.coef["logGDPcp"]
my.coef["logGDPcp"] * 2
my.coef["logGDPcp"] + 1
summary(my.lm)
summary(my.lm)$r.squared
plot(x = resources$logGDPcp,
y= resources$life)
#First we produce a scatter plot
##Note that we usually put the dependent variable on the y-axis
plot(x = resources$logGDPcp,
y= resources$life)
##Add the regression line
abline(my.lm, col = "red")
head(resources)
head(resources$logGDPcp)
tail(resources$logGDPcp)
View(resources)
new.resources
set.seed(08540)
new.resources = data.frame(logGDPcp = abs(rnorm(10) * 30))
new.resources
colnames(new.resources)
colnames(new.resources) = "GDP"
new.resources
predict(my.lm, newdata = new.resources)
colnames(new.resources) = "logGDPcp"
new.resources
predict(my.lm, newdata = new.resources)
rbinom(1, 1, prob = 0.5)
rbinom(5, 1, prob = 0.5)
rbinom(5, 5, prob = 0.5)
?rbinom
dbinom(5, 5, prob = 0.5)
0,5^5
0.5^5
pbinom(5, 5, prob=0.5)
qbinom(5, ,5 prob=0.5)
qbinom(5 ,5 prob=0.5)
qbinom(0.5, 5, prob = 0.5)
pbinom(0, 5, prob = 0.5)
pbinom(1, 5, prob = 0.5)
0.5^5*5
0.5^5*5 + 0.5^5
